#!/bin/sh

set -e

# Can't use tput, not available in busybox. Can't use escape, not available either...
NORMAL="[0m"
RED="[31;1m"
GREEN="[32;1m"
YELLOW="[33;1m"
BLUE="[34;1m"
BEGINNING="[K"

log_begin_msg () {
    printf "${BEGINNING}"
    printf "${BLUE}[â€¦]${NORMAL} $1${BLUE}...${NORMAL} "
}
log_ok_msg () {
    printf "${BEGINNING}"
    echo "$BOLD$GREEN[âœ”]$NORMAL $1."
}
log_warn_msg () {
    printf "${BEGINNING}"
    echo "$BOLD$YELLOW[âš¡]$NORMAL $1!"
}
log_error_msg () {
    printf "${BEGINNING}"
    echo "$BOLD$RED[âœ˜]$NORMAL $1!"
    exit 1
}
log_info_msg () {
    printf "${BEGINNING}"
    echo "$BOLD$BLUE[âˆ—]$NORMAL $1."
}

check_kernel() {
    log_begin_msg "Checking kernel version"
    [ -f "$KERNEL" ] || log_error_msg "Unable to find kernel $KERNEL"
    VERSION=$(file "$KERNEL" | sed -n 's/.*: Linux kernel x86 boot executable bzImage, version \([^ ]*\) .*/\1/p')
    [ -n "$VERSION" ] || log_error_msg "Unable to determine version for $KERNEL"
    log_ok_msg "Found kernel $VERSION"

    log_begin_msg "Check kernel configuration"
    CONFIG="$(dirname $KERNEL)/config-$VERSION"
    [ -f "$CONFIG" ] || log_error_msg "Unable to find configuration file $CONFIG"
    cat <<EOF | while read el; do
9P_FS=[ym]
AUFS_FS=[ym]
NET_9P=[ym]
NET_9P_VIRTIO=[ym]
VIRTIO=[ym]
VIRTIO_PCI=[ym]
SERIAL_8250=y
SERIAL_8250_CONSOLE=y
TMPFS=y
BLK_DEV_INITRD=y
EOF
        grep -qx "CONFIG_$el" $CONFIG || log_error_msg "Kernel not configured with CONFIG_$el"
    done
    log_ok_msg "Kernel configuration checked"

    log_begin_msg "Search for modules"
    for dir in "$(dirname $KERNEL)/lib/modules/$VERSION" "/lib/modules/$VERSION"; do
        [ -d $dir ] || continue
        MODULES="$dir"
        break
    done
    if [ -z "$MODULES" ]; then
        log_warn_msg "Unable to find module directory"
    else
        log_ok_msg "Modules are in $MODULES"
    fi
}

check_dependencies() {
    log_begin_msg "Checking if dependencies are present"
    which busybox 2> /dev/null > /dev/null || log_error_msg "Busybox is not installed"
    which qemu-system-x86_64 2> /dev/null > /dev/null || log_error_msg "qemu-system is not installed"
    log_ok_msg "All dependencies are met"
}

setup_tmp () {
    TMP=$(mktemp -d)
    trap "rm -rf $TMP" EXIT
    log_info_msg "TMP is $TMP"
}

setup_initrd () {
    log_begin_msg "Build initrd"
    DESTDIR=$TMP/initrd
    mkdir -p $DESTDIR

    # Copy busybox
    install -D $(which busybox) ${DESTDIR}/bin/busybox
    for applet in $(${DESTDIR}/bin/busybox --list); do
        ln -s busybox ${DESTDIR}/bin/${applet}
    done

    # Add libs
    for x in $(ldd $(which busybox) 2> /dev/null | sed -e '
               /\//!d;
               /linux-gate/d;
               /=>/ {s/.*=>[[:blank:]]*\([^[:blank:]]*\).*/\1/};
               s/[[:blank:]]*\([^[:blank:]]*\) (.*)/\1/' 2>/dev/null); do
        install -D "$x" "${DESTDIR}/$x"
    done

    # Add modules
    [ -z "$MODULES" ] || {
        for mod in 9pnet_virtio 9p aufs virtio_pci; do
            modprobe --all --set-version="${VERSION}" -d ${MODULES}/../../.. \
                --ignore-install --quiet --show-depends $mod > /dev/null || {
                log_warn_msg "Unable to find module $mod"
                log_begin_msg "Continue building initrd"
            }
            modprobe --all --set-version="${VERSION}" -d ${MODULES}/../../.. \
                --ignore-install --quiet --show-depends $mod |
            while read prefix kmod options ; do
                [ "${prefix}" = "insmod" ] || continue
                grep -qFw "$kmod" ${DESTDIR}/modules 2> /dev/null || {
                    install -D "$kmod" "${DESTDIR}/${kmod}"
                    echo $prefix $kmod $options >> ${DESTDIR}/modules
                }
            done
        done
    }

    # Copy this program
    cp $PROGNAME ${DESTDIR}/init

    # Create /tmp
    mkdir ${DESTDIR}/tmp

    # Build initrd
    cd "${DESTDIR}" && find . | cpio --quiet -R 0:0 -o -H newc | gzip > $TMP/initrd.gz

    log_ok_msg "initrd built in $TMP/initrd.gz"
}

start_vm () {
    name=$(echo eudyptula-${VERSION} | tr '.' '-')
    log_info_msg "Start VM $name"
    # /root is mounted with version 9p2000.u to allow access to /dev,
    # /sys and to mount new partitions over them. This is not the case
    # for 9p2000.L.
    cat <<EOF > "$TMP/vm-$name.exec"
#!/bin/sh
        exec qemu-system-x86_64 \
        -enable-kvm \
        -nodefconfig -no-user-config -nodefaults \
        -display none \
        \
        -chardev stdio,id=charserial0,signal=off \
        -device isa-serial,chardev=charserial0,id=serial0 \
        -chardev socket,id=charserial1,path=$TMP/vm-$name-serial.pipe,server,nowait \
        -device isa-serial,chardev=charserial1,id=serial1 \
        \
        -chardev socket,id=con0,path=$TMP/vm-$name-console.pipe,server,nowait \
        -mon chardev=con0,mode=readline,default \
        \
        -fsdev local,security_model=passthrough,id=fsdev-root,path=${ROOT},readonly \
        -device virtio-9p-pci,id=fs-root,fsdev=fsdev-root,mount_tag=rootshare \
        -fsdev local,security_model=none,id=fsdev-home,path=${HOME} \
        -device virtio-9p-pci,id=fs-home,fsdev=fsdev-home,mount_tag=homeshare \
        -fsdev local,security_model=none,id=fsdev-modules,path=${MODULES}/.. \
        -device virtio-9p-pci,id=fs-modules,fsdev=fsdev-modules,mount_tag=moduleshare \
        \
        -gdb unix:$TMP/vm-$name-gdb.pipe,server,nowait \
        -no-reboot \
        -kernel $KERNEL \
        -initrd $TMP/initrd.gz \
        -append "uts=$name console=ttyS0 panic=1 TERM=$TERM quiet"
        "$@"
EOF
    log_info_msg "GDB server listening on $TMP/vm-$name-gdb.pipe"
    log_info_msg "monitor listening on    $TMP/vm-$name-console.pipe"
    log_info_msg "ttyS1 listening on      $TMP/vm-$name-serial.pipe"
    chmod +x "$TMP/vm-$name.exec"
    "$TMP/vm-$name.exec"
    log_info_msg "VM has terminated with status $?"
}

# FSM
export STATE=${STATE:-BEGIN}
case $$,$STATE in
    1,BEGIN)
        # In initrd
        log_info_msg "initrd started"
        hostname ${uts}
        export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/local/sbin:/usr/sbin
        export HOME=/root

        [ ! -f /modules ] || {
            log_info_msg "Loading modules"
            . /modules
        }

        log_begin_msg "Setup AUFS"
        mount -n -t tmpfs tmpfs /tmp -o rw
        mkdir /tmp/target
        mkdir /tmp/target/ro
        mkdir /tmp/target/rw
        mkdir /tmp/target/overlay
        mount -n -t 9p    rootshare /tmp/target/ro      -o trans=virtio,version=9p2000.u,ro
        mount -n -t tmpfs tmpfs     /tmp/target/rw      -o rw
        mount -n -t aufs  aufs      /tmp/target/overlay -o noxino,noatime,dirs=/tmp/target/rw:/tmp/target/ro=ro
        mount -n -t proc  proc /tmp/target/overlay/proc
        mount -n -t sysfs sys  /tmp/target/overlay/sys
        log_ok_msg "AUFS setup"

        log_begin_msg "Mount /root"
        mount -t 9p homeshare /tmp/target/overlay/root -o trans=virtio,version=9p2000.L,access=0,rw || \
            log_error_msg "Unable to mount /root"
        log_ok_msg "/root mounted"
        log_begin_msg "Mount /lib/modules"
        mount -t 9p moduleshare /tmp/target/overlay/lib/modules -o trans=virtio,version=9p2000.L,access=0,ro || \
            log_error_msg "Unable to mount /lib/modules"
        log_ok_msg "/root and /lib/modules mounted"

        log_info_msg "Change root"
        export STATE=CHROOTED
        cp /init /tmp/target/overlay
        exec chroot /tmp/target/overlay /init
        ;;

    1,CHROOTED)
        log_begin_msg "Clean /tmp and /run"
        for fs in /run /var/run /var/tmp /var/log /tmp; do
            mount -t tmpfs tmpfs $fs -o rw,nosuid,nodev
        done
        log_ok_msg "/tmp, /run and others are clean"

        log_info_msg "Start udev"
        /etc/init.d/udev start

        log_info_msg "Setup terminal"
        export STATE=GETTY
        exec setsid /sbin/getty -L ttyS0 -a root -l /init -i 115200 $TERM
        ;;

    1,GETTY)
        log_begin_msg "Setup additional commands"
        cat <<EOF > /sbin/reboot
#!/bin/sh
echo b > /proc/sysrq-trigger
EOF
        cat <<EOF > /sbin/halt
#!/bin/sh
echo b > /proc/sysrq-trigger
EOF
        log_ok_msg "Systems can be halted with halt or reboot"

        log_info_msg "Spawning a shell"
        cd  $HOME
        export SSH_TTY=$(tty)
        if [ -f $HOME/.zshrc ]; then
            /bin/zsh -i
        else
            /bin/bash -i
        fi
        ;;

    *,BEGIN)
        # Initial state
        [ $(id -u) != 0 ] || {
            log_error_msg "You should not run this as root"
            exit 1
        }
        PROGNAME="$(readlink -f "$0")"
        ROOT="$(readlink -f "${ROOT:-/}")" # Root filesystem
        KERNEL="$(readlink -f "${1:-/boot/vmlinuz-$(uname -r)}")" # Kernel
        [ $# -lt 1 ] || shift

        check_kernel
        check_dependencies
        setup_tmp
        setup_initrd
        start_vm "$@"
        rm -rf $TMP || true
        ;;
esac
